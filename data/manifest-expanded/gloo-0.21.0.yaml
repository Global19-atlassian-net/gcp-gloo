---
apiVersion: v1
data: null
kind: ConfigMap
metadata:
  labels:
    app: gloo
    app.kubernetes.io/name: test
    gloo: gloo-usage
    installationId: L8UrUSmzqFeEGY7pK0xf
  name: gloo-usage
  namespace: tmp
---
apiVersion: v1
data:
  envoy.yaml: "node:\n  cluster: gateway\n  id: \"{{.PodName}}.{{.PodNamespace}}\"\
    \n  metadata:\n    # role's value is the key for the in-memory xds cache (projects/gloo/pkg/xds/envoy.go)\n\
    \    role: \"{{.PodNamespace}}~gateway-proxy-v2\"\nstats_sinks:\n  - name: envoy.metrics_service\n\
    \    config:\n      grpc_service:\n        envoy_grpc: {cluster_name: gloo.tmp.svc.cluster.local:9966}\n\
    static_resources:\n  listeners: # if or ($spec.stats) ($spec.readConfig)\n   \
    \ - name: prometheus_listener\n      address:\n        socket_address:\n     \
    \     address: 0.0.0.0\n          port_value: 8081\n      filter_chains:\n   \
    \     - filters:\n            - name: envoy.http_connection_manager\n        \
    \      config:\n                codec_type: auto\n                stat_prefix:\
    \ prometheus\n                route_config:\n                  name: prometheus_route\n\
    \                  virtual_hosts:\n                    - name: prometheus_host\n\
    \                      domains:\n                        - \"*\"\n           \
    \           routes:\n                        - match:\n                      \
    \      path: \"/ready\"\n                            headers:\n              \
    \              - name: \":method\"\n                              exact_match:\
    \ GET\n                          route:\n                            cluster:\
    \ admin_port_cluster\n                        - match:\n                     \
    \       prefix: \"/metrics\"\n                            headers:\n         \
    \                   - name: \":method\"\n                              exact_match:\
    \ GET\n                          route:\n                            prefix_rewrite:\
    \ \"/stats/prometheus\"\n                            cluster: admin_port_cluster\n\
    \                http_filters:\n                  - name: envoy.router\n     \
    \               config: {} # if $spec.stats # if $spec.readConfig\n  clusters:\n\
    \  - name: gloo.tmp.svc.cluster.local:9977\n    alt_stat_name: xds_cluster\n \
    \   connect_timeout: 5.000s\n    load_assignment:\n      cluster_name: gloo.tmp.svc.cluster.local:9977\n\
    \      endpoints:\n      - lb_endpoints:\n        - endpoint:\n            address:\n\
    \              socket_address:\n                address: gloo.tmp.svc.cluster.local\n\
    \                port_value: 9977\n    http2_protocol_options: {}\n    upstream_connection_options:\n\
    \      tcp_keepalive: {}\n    type: STRICT_DNS\n    respect_dns_ttl: true\n  -\
    \ name: gloo.tmp.svc.cluster.local:9966\n    alt_stat_name: metrics_cluster\n\
    \    connect_timeout: 5.000s\n    load_assignment:\n        cluster_name: gloo.tmp.svc.cluster.local:9966\n\
    \        endpoints:\n        - lb_endpoints:\n          - endpoint:\n        \
    \        address:\n                    socket_address:\n                     \
    \   address: gloo.tmp.svc.cluster.local\n                        port_value: 9966\n\
    \    http2_protocol_options: {}\n    type: STRICT_DNS # if .Values.accessLogger.enabled\
    \ # if $spec.tracing\n  - name: admin_port_cluster\n    connect_timeout: 5.000s\n\
    \    type: STATIC\n    lb_policy: ROUND_ROBIN\n    load_assignment:\n      cluster_name:\
    \ admin_port_cluster\n      endpoints:\n      - lb_endpoints:\n        - endpoint:\n\
    \            address:\n              socket_address:\n                address:\
    \ 127.0.0.1\n                port_value: 19000 # if or ($spec.stats) ($spec.readConfig)\
    \ # if $spec.tracing\ndynamic_resources:\n  ads_config:\n    api_type: GRPC\n\
    \    rate_limit_settings: {}\n    grpc_services:\n    - envoy_grpc: {cluster_name:\
    \ gloo.tmp.svc.cluster.local:9977}\n  cds_config:\n    ads: {}\n  lds_config:\n\
    \    ads: {}\nadmin:\n  access_log_path: /dev/null\n  address:\n    socket_address:\n\
    \      address: 127.0.0.1\n      port_value: 19000 # if (empty $spec.configMap.data)\
    \ ## allows full custom # range $name, $spec := .Values.gatewayProxies# if .Values.gateway.enabled\n"
kind: ConfigMap
metadata:
  labels:
    app: gloo
    app.kubernetes.io/name: test
    gateway-proxy-id: gateway-proxy-v2
    gloo: gateway-proxy
    installationId: L8UrUSmzqFeEGY7pK0xf
  name: gateway-proxy-v2-envoy-config
  namespace: tmp
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations: null
  labels:
    app: gloo
    app.kubernetes.io/name: test
    gloo: gloo
    installationId: L8UrUSmzqFeEGY7pK0xf
  name: gloo
  namespace: tmp
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations: null
  labels:
    app: gloo
    app.kubernetes.io/name: test
    gloo: discovery
    installationId: L8UrUSmzqFeEGY7pK0xf
  name: discovery
  namespace: tmp
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations: null
  labels:
    app: gloo
    app.kubernetes.io/name: test
    gloo: gateway
    installationId: L8UrUSmzqFeEGY7pK0xf
  name: gateway
  namespace: tmp
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations: null
  labels:
    app: gloo
    app.kubernetes.io/name: test
    gloo: gateway
    installationId: L8UrUSmzqFeEGY7pK0xf
  name: gateway-certgen
  namespace: tmp
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations: null
  labels:
    app: gloo
    app.kubernetes.io/name: test
    gloo: gateway-proxy
    installationId: L8UrUSmzqFeEGY7pK0xf
  name: gateway-proxy
  namespace: tmp
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations: null
  labels:
    app: gloo
    app.kubernetes.io/name: test
    gloo: rbac
    installationId: L8UrUSmzqFeEGY7pK0xf
  name: kube-resource-watcher-tmp
rules:
- apiGroups:
  - ''
  resources:
  - pods
  - services
  - secrets
  - endpoints
  - configmaps
  - namespaces
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations: null
  labels:
    app: gloo
    app.kubernetes.io/name: test
    gloo: rbac
    installationId: L8UrUSmzqFeEGY7pK0xf
  name: gloo-upstream-mutator-tmp
rules:
- apiGroups:
  - gloo.solo.io
  resources:
  - upstreams
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations: null
  labels:
    app: gloo
    app.kubernetes.io/name: test
    gloo: rbac
    installationId: L8UrUSmzqFeEGY7pK0xf
  name: gloo-resource-reader-tmp
rules:
- apiGroups:
  - gloo.solo.io
  - enterprise.gloo.solo.io
  resources:
  - upstreams
  - upstreamgroups
  - proxies
  - authconfigs
  verbs:
  - get
  - list
  - watch
  - update
- apiGroups:
  - ''
  resources:
  - configmaps
  verbs:
  - get
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations: null
  labels:
    app: gloo
    app.kubernetes.io/name: test
    gloo: rbac
    installationId: L8UrUSmzqFeEGY7pK0xf
  name: settings-user-tmp
rules:
- apiGroups:
  - gloo.solo.io
  resources:
  - settings
  verbs:
  - get
  - list
  - watch
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations: null
  labels:
    app: gloo
    app.kubernetes.io/name: test
    gloo: rbac
    installationId: L8UrUSmzqFeEGY7pK0xf
  name: gloo-resource-mutator-tmp
rules:
- apiGroups:
  - gloo.solo.io
  resources:
  - proxies
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations: null
  labels:
    app: gloo
    app.kubernetes.io/name: test
    gloo: rbac
    installationId: L8UrUSmzqFeEGY7pK0xf
  name: gateway-resource-reader-tmp
rules:
- apiGroups:
  - gateway.solo.io
  resources:
  - virtualservices
  - routetables
  verbs:
  - get
  - list
  - watch
  - update
- apiGroups:
  - gateway.solo.io
  resources:
  - gateways
  verbs:
  - get
  - list
  - watch
  - create
  - update
- apiGroups:
  - gateway.solo.io.v2
  resources:
  - gateways
  verbs:
  - get
  - list
  - watch
  - create
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations: null
  labels:
    app: gloo
    app.kubernetes.io/name: test
    gloo: rbac
    installationId: L8UrUSmzqFeEGY7pK0xf
  name: gloo-gateway-secret-create-vwc-update-tmp
rules:
- apiGroups:
  - ''
  resources:
  - secrets
  verbs:
  - create
  - get
  - update
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - validatingwebhookconfigurations
  verbs:
  - get
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations: null
  labels:
    app: gloo
    app.kubernetes.io/name: test
    gloo: rbac
    installationId: L8UrUSmzqFeEGY7pK0xf
  name: kube-resource-watcher-binding-tmp
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-resource-watcher-tmp
subjects:
- kind: ServiceAccount
  name: gloo
  namespace: tmp
- kind: ServiceAccount
  name: discovery
  namespace: tmp
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations: null
  labels:
    app: gloo
    app.kubernetes.io/name: test
    gloo: rbac
    installationId: L8UrUSmzqFeEGY7pK0xf
  name: gloo-upstream-mutator-binding-tmp
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: gloo-upstream-mutator-tmp
subjects:
- kind: ServiceAccount
  name: discovery
  namespace: tmp
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations: null
  labels:
    app: gloo
    app.kubernetes.io/name: test
    gloo: rbac
    installationId: L8UrUSmzqFeEGY7pK0xf
  name: gloo-resource-reader-binding-tmp
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: gloo-resource-reader-tmp
subjects:
- kind: ServiceAccount
  name: gloo
  namespace: tmp
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations: null
  labels:
    app: gloo
    app.kubernetes.io/name: test
    gloo: rbac
    installationId: L8UrUSmzqFeEGY7pK0xf
  name: settings-user-binding-tmp
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: settings-user-tmp
subjects:
- kind: ServiceAccount
  name: gloo
  namespace: tmp
- kind: ServiceAccount
  name: gateway
  namespace: tmp
- kind: ServiceAccount
  name: discovery
  namespace: tmp
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations: null
  labels:
    app: gloo
    app.kubernetes.io/name: test
    gloo: rbac
    installationId: L8UrUSmzqFeEGY7pK0xf
  name: gloo-resource-mutator-binding-tmp
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: gloo-resource-mutator-tmp
subjects:
- kind: ServiceAccount
  name: gateway
  namespace: tmp
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations: null
  labels:
    app: gloo
    app.kubernetes.io/name: test
    gloo: rbac
    installationId: L8UrUSmzqFeEGY7pK0xf
  name: gateway-resource-reader-binding-tmp
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: gateway-resource-reader-tmp
subjects:
- kind: ServiceAccount
  name: gateway
  namespace: tmp
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations: null
  labels:
    app: gloo
    app.kubernetes.io/name: test
    gloo: rbac
    installationId: L8UrUSmzqFeEGY7pK0xf
  name: gloo-gateway-secret-create-vwc-update-tmp
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: gloo-gateway-secret-create-vwc-update-tmp
subjects:
- kind: ServiceAccount
  name: gateway-certgen
  namespace: tmp
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: gloo
    app.kubernetes.io/name: test
    gloo: gloo
    installationId: L8UrUSmzqFeEGY7pK0xf
  name: gloo
  namespace: tmp
spec:
  ports:
  - name: grpc-xds
    port: 9977
    protocol: TCP
  - name: grpc-validation
    port: 9988
    protocol: TCP
  - name: metrics-grpc
    port: 9966
    protocol: TCP
  selector:
    gloo: gloo
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: gloo
    app.kubernetes.io/name: test
    gloo: gateway
    installationId: L8UrUSmzqFeEGY7pK0xf
  name: gateway
  namespace: tmp
spec:
  ports:
  - name: https
    port: 443
    protocol: TCP
    targetPort: 8443
  selector:
    gloo: gateway
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: gloo
    app.kubernetes.io/name: test
    gateway-proxy-id: gateway-proxy-v2
    gloo: gateway-proxy
    installationId: L8UrUSmzqFeEGY7pK0xf
  name: gateway-proxy-v2
  namespace: tmp
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  - name: https
    port: 443
    protocol: TCP
    targetPort: 8443
  selector:
    gateway-proxy: live
    gateway-proxy-id: gateway-proxy-v2
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo
    app.kubernetes.io/name: test
    gloo: gloo
    installationId: L8UrUSmzqFeEGY7pK0xf
  name: gloo
  namespace: tmp
spec:
  replicas: 1
  selector:
    matchLabels:
      gloo: gloo
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: '9091'
        prometheus.io/scrape: 'true'
      labels:
        gloo: gloo
    spec:
      containers:
      - env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: START_STATS_SERVER
          value: 'true'
        image: quay.io/solo-io/gloo:0.21.0
        imagePullPolicy: IfNotPresent
        name: gloo
        ports:
        - containerPort: 9977
          name: grpc-xds
          protocol: TCP
        - containerPort: 9988
          name: grpc-validation
          protocol: TCP
        readinessProbe:
          failureThreshold: 10
          initialDelaySeconds: 1
          periodSeconds: 2
          tcpSocket:
            port: 9977
        resources:
          requests:
            cpu: 500m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10101
        volumeMounts:
        - mountPath: /etc/gloo
          name: labels-volume
          readOnly: true
      serviceAccountName: gloo
      volumes:
      - downwardAPI:
          items:
          - fieldRef:
              fieldPath: metadata.labels
            path: labels
        name: labels-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo
    app.kubernetes.io/name: test
    gloo: discovery
    installationId: L8UrUSmzqFeEGY7pK0xf
  name: discovery
  namespace: tmp
spec:
  replicas: 1
  selector:
    matchLabels:
      gloo: discovery
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: '9091'
        prometheus.io/scrape: 'true'
      labels:
        gloo: discovery
    spec:
      containers:
      - env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: START_STATS_SERVER
          value: 'true'
        image: quay.io/solo-io/discovery:0.21.0
        imagePullPolicy: IfNotPresent
        name: discovery
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10101
      serviceAccountName: discovery
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo
    app.kubernetes.io/name: test
    gloo: gateway
    installationId: L8UrUSmzqFeEGY7pK0xf
  name: gateway-v2
  namespace: tmp
spec:
  replicas: 1
  selector:
    matchLabels:
      gloo: gateway
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: '9091'
        prometheus.io/scrape: 'true'
      labels:
        gloo: gateway
    spec:
      containers:
      - env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: START_STATS_SERVER
          value: 'true'
        - name: VALIDATION_MUST_START
          value: 'true'
        image: quay.io/solo-io/gateway:0.21.0
        imagePullPolicy: IfNotPresent
        name: gateway
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        readinessProbe:
          failureThreshold: 10
          initialDelaySeconds: 1
          periodSeconds: 2
          tcpSocket:
            port: 8443
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10101
        volumeMounts:
        - mountPath: /etc/gateway/validation-certs
          name: validation-certs
      serviceAccountName: gateway
      volumes:
      - name: validation-certs
        secret:
          defaultMode: 420
          secretName: gateway-validation-certs
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo
    app.kubernetes.io/name: test
    gateway-proxy-id: gateway-proxy-v2
    gloo: gateway-proxy
    installationId: L8UrUSmzqFeEGY7pK0xf
  name: gateway-proxy-v2
  namespace: tmp
spec:
  replicas: 1
  selector:
    matchLabels:
      gateway-proxy-id: gateway-proxy-v2
      gloo: gateway-proxy
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: '8081'
        prometheus.io/scrape: 'true'
      labels:
        gateway-proxy: live
        gateway-proxy-id: gateway-proxy-v2
        gloo: gateway-proxy
    spec:
      containers:
      - args:
        - --disable-hot-restart
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        image: quay.io/solo-io/gloo-envoy-wrapper:0.21.0
        imagePullPolicy: IfNotPresent
        name: gateway-proxy-v2
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8443
          name: https
          protocol: TCP
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - ALL
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /etc/envoy
          name: envoy-config
      serviceAccountName: gateway-proxy
      volumes:
      - configMap:
          name: gateway-proxy-v2-envoy-config
        name: envoy-config
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations: null
  labels:
    app: gloo
    app.kubernetes.io/name: test
    gloo: gateway-certgen
    installationId: L8UrUSmzqFeEGY7pK0xf
  name: gateway-certgen
  namespace: tmp
spec:
  template:
    metadata:
      labels:
        gloo: gateway-certgen
    spec:
      containers:
      - args:
        - --secret-name=gateway-validation-certs
        - --svc-name=gateway
        - --validating-webhook-configuration-name=gloo-gateway-validation-webhook-tmp
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: quay.io/solo-io/certgen:0.21.0
        imagePullPolicy: IfNotPresent
        name: certgen
      restartPolicy: OnFailure
      serviceAccountName: gateway-certgen
---
apiVersion: gateway.solo.io.v2/v2
kind: Gateway
metadata:
  annotations: null
  labels:
    app: gloo
    app.kubernetes.io/name: test
    installationId: L8UrUSmzqFeEGY7pK0xf
  name: gateway-proxy-v2
  namespace: tmp
spec:
  bindAddress: '::'
  bindPort: 8080
  httpGateway: {}
  proxyNames:
  - gateway-proxy-v2
  ssl: false
  useProxyProto: false
---
apiVersion: gateway.solo.io.v2/v2
kind: Gateway
metadata:
  annotations: null
  labels:
    app: gloo
    app.kubernetes.io/name: test
    installationId: L8UrUSmzqFeEGY7pK0xf
  name: gateway-proxy-v2-ssl
  namespace: tmp
spec:
  bindAddress: '::'
  bindPort: 8443
  httpGateway: {}
  proxyNames:
  - gateway-proxy-v2
  ssl: true
  useProxyProto: false
---
apiVersion: gloo.solo.io/v1
kind: Settings
metadata:
  annotations: null
  labels:
    app: gloo
    app.kubernetes.io/name: test
    installationId: L8UrUSmzqFeEGY7pK0xf
  name: default
  namespace: tmp
spec:
  discoveryNamespace: tmp
  gateway:
    validation:
      alwaysAccept: true
      proxyValidationServerAddr: gloo:9988
  gloo:
    xdsBindAddr: 0.0.0.0:9977
  kubernetesArtifactSource: {}
  kubernetesConfigSource: {}
  kubernetesSecretSource: {}
  refreshRate: 60s
---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  annotations: null
  labels:
    app: gloo
    app.kubernetes.io/name: test
    gloo: gateway
    installationId: L8UrUSmzqFeEGY7pK0xf
  name: gloo-gateway-validation-webhook-tmp
webhooks:
- clientConfig:
    caBundle: ''
    service:
      name: gateway
      namespace: tmp
      path: /validation
  failurePolicy: Ignore
  name: gateway.tmp.svc
  rules:
  - apiGroups:
    - gateway.solo.io
    - gateway.solo.io.v2
    apiVersions:
    - v1
    - v2
    operations:
    - CREATE
    - UPDATE
    - DELETE
    resources:
    - '*'
