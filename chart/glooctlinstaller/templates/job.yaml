{{- if .Values.marketplaceResources }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-install-values
  namespace: {{ .Release.Namespace }}
data:
  "marketplace.yaml": >-
    gloo:
      deployment:
        image:
          registry: {{ .Values.glooImages.gloo.registry }}
          repository: {{ .Values.glooImages.gloo.repository }}
          tag: {{ .Values.glooImages.gloo.tag }}
    discovery:
      deployment:
        image:
          registry: {{ .Values.glooImages.discovery.registry }}
          repository: {{ .Values.glooImages.discovery.repository }}
          tag: {{ .Values.glooImages.discovery.tag }}
    gateway:
      deployment:
        image:
          registry: {{ .Values.glooImages.gateway.registry }}
          repository: {{ .Values.glooImages.gateway.repository }}
          tag: {{ .Values.glooImages.gateway.tag }}
      certGenJob:
        image:
          registry: {{ .Values.glooImages.certgen.registry }}
          repository: {{ .Values.glooImages.certgen.repository }}
          tag: {{ .Values.glooImages.certgen.tag }}
    accessLogger:
      deployment:
        image:
          registry: {{ .Values.glooImages.accessLogger.registry }}
          repository: {{ .Values.glooImages.accessLogger.repository }}
          tag: {{ .Values.glooImages.accessLogger.tag }}
    gatewayProxies:
      gatewayProxy:
        podTemplate:
          image:
            registry: {{ .Values.glooImages.glooEnvoyWrapper.registry }}
            repository: {{ .Values.glooImages.glooEnvoyWrapper.repository }}
            tag: {{ .Values.glooImages.glooEnvoyWrapper.tag }}
  "marketplace-enterprise.yaml": >-
    global:
      image:
        registry: gcr.io/solo-io-public
        pullPolicy: IfNotPresent
        pullSecret: solo-io-readerbot-pull-secret
      extensions:
        extAuth:
          deployment:
            image:
              registry: {{ .Values.glooeImages.extAuth.registry }}
              repository: {{ .Values.glooeImages.extAuth.repository }}
              tag: {{ .Values.glooeImages.extAuth.tag }}
    apiServer:
      deployment:
        envoy:
          image:
            registry: {{ .Values.glooeImages.apiServerProxy.registry }}
            repository: {{ .Values.glooeImages.apiServerProxy.repository }}
            tag: {{ .Values.glooeImages.apiServerProxy.tag }}
        server:
          image:
            pullPolicy: IfNotPresent
            registry: {{ .Values.glooeImages.apiServerBackend.registry }}
            repository: {{ .Values.glooeImages.apiServerBackend.repository }}
            tag: {{ .Values.glooeImages.apiServerBackend.tag }}
        ui:
          image:
            pullPolicy: IfNotPresent
            registry: {{ .Values.glooeImages.apiServerFrontend.registry }}
            repository: {{ .Values.glooeImages.apiServerFrontend.repository }}
            tag: {{ .Values.glooeImages.apiServerFrontend.tag }}
    rateLimit:
      deployment:
        image:
          registry: {{ .Values.glooeImages.rateLimit.registry }}
          repository: {{ .Values.glooeImages.rateLimit.repository }}
          tag: {{ .Values.glooeImages.rateLimit.tag }}
    redis:
      deployment:
        image:
          registry: {{ .Values.glooeImages.redis.registry }}
          repository: {{ .Values.glooeImages.redis.repository }}
          tag: {{ .Values.glooeImages.redis.tag }}
    observability:
      # TODO enable
      enabled: false
    prometheus:
      # TODO enable
      enabled: false
    grafana:
      # TODO enable
      enabled: false
    gloo:
      gloo:
        deployment:
          image:
            registry: {{ .Values.glooImages.gloo.registry }}
            repository: {{ .Values.glooImages.gloo.repository }}
            tag: {{ .Values.glooImages.gloo.tag }}
      discovery:
        deployment:
          image:
            registry: {{ .Values.glooImages.discovery.registry }}
            repository: {{ .Values.glooImages.discovery.repository }}
            tag: {{ .Values.glooImages.discovery.tag }}
      gateway:
        deployment:
          image:
            registry: {{ .Values.glooImages.gateway.registry }}
            repository: {{ .Values.glooImages.gateway.repository }}
            tag: {{ .Values.glooImages.gateway.tag }}
        certGenJob:
          image:
            registry: {{ .Values.glooImages.certgen.registry }}
            repository: {{ .Values.glooImages.certgen.repository }}
            tag: {{ .Values.glooImages.certgen.tag }}
      accessLogger:
        deployment:
          image:
            registry: {{ .Values.glooImages.accessLogger.registry }}
            repository: {{ .Values.glooImages.accessLogger.repository }}
            tag: {{ .Values.glooImages.accessLogger.tag }}
      gatewayProxies:
        gatewayProxy:
          podTemplate:
            image:
              registry: {{ .Values.glooImages.glooEnvoyWrapper.registry }}
              repository: {{ .Values.glooImages.glooEnvoyWrapper.repository }}
              tag: {{ .Values.glooImages.glooEnvoyWrapper.tag }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-gloo-installer
  namespace: {{ .Release.Namespace }}
spec:
  template:
    spec:
      serviceAccount: {{ .Values.glooctlServiceAccount }}
      initContainers:
      - name: glooctl-installer
        image: {{ .Values.glooctlInstaller.image.full }}
        imagePullPolicy: Always
        command:
          - "glooctl"
          - "install"
          - "gateway"
          {{- if .Values.enterpriseLicense }}
          - "enterprise"
          - "--license-key"
          - {{ .Values.enterpriseLicense }}
          - "--file"
          - "/var/gloo/gloo-ee-1.3.2.tgz"
          - "--values"
          - /var/gloo/install-values/marketplace-enterprise.yaml
          {{- else }} # enterpriseLicense
          - "--file"
          - "/var/gloo/gloo-1.3.21.tgz"
          - "--values"
          - /var/gloo/install-values/marketplace.yaml
          {{- end }} # enterpriseLicense
          - "--namespace"
          - {{ .Release.Namespace }}
        volumeMounts:
          - name: values-volume
            mountPath: /var/gloo/install-values
      containers:
      - name: glooctl-installer-own-resources
        image: {{ .Values.glooctlInstaller.image.full }}
        imagePullPolicy: Always
        env:
          - name: APP_NAME
            value: {{ .Release.Name }}
          - name: NAMESPACE
            value: {{ .Release.Namespace }}
          - name: TARGET_SELECTOR
            value: gloo
        command: 
          - "setOwner"
      # grafana is a subchart so it does not have the "gloo" label
      - name: glooctl-installer-own-grafana
        image: {{ .Values.glooctlInstaller.image.full }}
        imagePullPolicy: Always
        env:
          - name: APP_NAME
            value: {{ .Release.Name }}
          - name: NAMESPACE
            value: {{ .Release.Namespace }}
          - name: TARGET_SELECTOR
            value: app=glooe-grafana
        command:
          - "setOwner"
      volumes:
        - name: values-volume
          configMap:
            name: {{ .Release.Name }}-install-values
            items:
            - key: "marketplace.yaml"
              path: "marketplace.yaml"
            - key: "marketplace-enterprise.yaml"
              path: "marketplace-enterprise.yaml"
      restartPolicy: Never
  backoffLimit: 4
{{- end }} # marketplaceResources
